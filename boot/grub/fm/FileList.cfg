# Grub2-FileManager
# Copyright (C) 2016,2017  A1ive.
#
# Grub2-FileManager is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Grub2-FileManager is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Grub2-FileManager.  If not, see <http://www.gnu.org/licenses/>.

source ${prefix}/fm/Type.cfg;

set file_list_src="${prefix}/fm/FileList.cfg";
set file_op_src="${prefix}/fm/FileOP.cfg";

function funcListFile {
	if test -z "${list_dir}"; then
		set list_dir="";
		set wildcard="(*)";
	elif test -e "${list_dir}"; then
		set wildcard="/*";
	else
		echo "错误! 无法读取 [${list_dir}] !";
		echo -n "按[ESC]继续...";
		sleep --interruptible 999;
		return 1;
	fi;
	export list_dir;
	set list_dir_this="${list_dir}";
	
	if ! regexp '^$' "${list_dir_this}"; then
		menuentry "返回上一级" --class go-previous{
			set list_dir="";
			regexp --set=list_dir '(^.*)/.*$' "${list_dir_this}";
			export list_dir;
			unset obj;
			unset wildcard;
			configfile ${prefix}/fm/FileList.cfg;
		}
	fi
	for obj in "${list_dir_this}"${wildcard}; do
		if test -d "${obj}"; then
			set icon="dir";
			if regexp '^\([c][d].*+\)$' "${obj}"; then
				set icon="iso";
			elif regexp '^\([h][d].*+\)$' "${obj}"; then
				set icon="hdd";
			fi
			if regexp '^\(proc\)$' "${obj}"; then
				echo "ignore proc";
			elif regexp '^\(memdisk\)$' "${obj}"; then
				echo "ignore memdisk";
			elif regexp '^$' "${list_dir_this}"; then
				probe --set=devlbl -l $obj;
				probe --set=devfs -f $obj;
				menuentry "${obj} [$devfs] $devlbl" "${obj}" --class ${icon}{
					set list_dir="$2";
					configfile "${file_list_src}";
				}
				unset devlbl;
				unset devfs;
			else
				menuentry "${obj}" "${obj}" --class ${icon}{
					set list_dir="$2";
					configfile "${file_list_src}";
				}
			fi
		elif test -f "${obj}"; then
			funcGetFileType "${obj}";
			menuentry "${obj}" "${obj}" --class ${icon} --class os{
				set list_dir="$2";
				configfile "${file_op_src}";
			}
		else
			continue;
		fi;
	done;
	if regexp '^$' "${list_dir_this}"; then
		funcBootDisk;
		hiddenentry "分辨率设置: $gfxmode" --class settings --hotkey=r{
			configfile ${prefix}/fm/GFXMode.cfg
		}
		menuentry "重启计算机" --class reboot{
			reboot;
		}
		menuentry "关闭计算机" --class halt{
			halt;
		}
	fi
	unset obj;
	unset wildcard;
	echo "done!";
}

function funcBootDisk{
	for dev in (*); do
		test -e ${dev};
		if test "$?" = "1"; then
			continue;
		fi;
		regexp --set=device '\((.*)\)' $dev;
		if test -f ($device)/efi/microsoft/boot/bootmgfw.efi -a -f ($device)/efi/microsoft/boot/bcd; then
			menuentry "启动位于${device}的 Windows 操作系统 " $device --class wim{
				set root=$2
				chainloader ($root)/efi/microsoft/boot/bootmgfw.efi;
				boot;
			}
		fi;
		unset devlbl;
	done;
}

funcListFile;
